Package pinning is a way to control which version of a package APT should install — especially when:

The same package exists in multiple repositories

You want to prevent upgrades or prefer a specific version/source

🔍 Pinning lets you control package sources and versions with precision, avoiding surprises during apt upgrade.

| Use Case                                                    | Why Use Pinning                                    |
| ----------------------------------------------------------- | -------------------------------------------------- |
| 🧪 Testing a newer version from a custom repo               | Pin to a higher-priority PPA or backport           |
| 🔒 Locking critical software to specific versions           | Avoid breaking changes or regressions              |
| ⚖️ Mixing repositories (Ubuntu + Debian, or official + PPA) | Avoid accidental upgrades from less stable sources |
| 🎯 Force a downgraded version and block updates             | Revert a broken update                             |

------
📁 Where Pinning Rules Live

Main config file:

/etc/apt/preferences


Or per-repo (recommended for organization):

/etc/apt/preferences.d/<name>.pref


📄 You can have multiple .pref files, but they must be owned by root and have correct syntax.


---------
🧱 Syntax of a Pinning Rule

Package: <package-name>
Pin: <pin-type> <value>
Pin-Priority: <priority>

🔹 Example 1: Pin Package from a Specific Release

Package: nginx
Pin: release a=jammy
Pin-Priority: 700

This tells APT to prefer installing nginx from the Ubuntu 22.04 (Jammy) release if available.

🔹 Example 2: Pin Package to Specific Version

Package: nginx
Pin: version 1.18.0*
Pin-Priority: 1001

This forces APT to always use version 1.18.0, even if newer ones exist.

1001 means "force install even if it downgrades."

🔹 Example 3: Block Package from Being Installed

Package: nginx
Pin: version *
Pin-Priority: -1

Prevents any version of nginx from being installed. Great for blacklisting.

------
📊 Understanding Pin Priorities

| Priority   | Behavior                                                   |
| ---------- | ---------------------------------------------------------- |
| `>1000`    | Force install/downgrade even if older                      |
| `990–1000` | Install unless a higher-priority version exists            |
| `500`      | Default for most repo packages                             |
| `100`      | Used for lower-priority sources (e.g., manually installed) |
| `<0`       | Prevent installation                                       |

------
🧼 Best Practices

| Best Practice                                                           | Why                                                    |
| ----------------------------------------------------------------------- | ------------------------------------------------------ |
| Always verify versions with `apt-cache policy`                          | Avoid unintentional downgrades/upgrades                |
| Use `/etc/apt/preferences.d/` instead of editing `preferences` directly | Easier to manage                                       |
| Use clear file names (e.g. `nginx.pref`)                                | Easier troubleshooting                                 |
| Avoid overusing pinning                                                 | It can make the system harder to maintain              |
| Document your pins!                                                     | You'll forget why you pinned something months later 😅 |

------
✅ Summary Table

| Task                     | Command / Config                    |
| ------------------------ | ----------------------------------- |
| Check versions & sources | `apt-cache policy <pkg>`            |
| Set pinning rules        | `/etc/apt/preferences.d/<pkg>.pref` |
| Pin by version           | `Pin: version 1.2.3*`               |
| Pin by release           | `Pin: release a=jammy`              |
| Prevent install          | `Pin-Priority: -1`                  |


