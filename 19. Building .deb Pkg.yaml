üì¶ What is a .deb Package?

A .deb file is a Debian binary package ‚Äî it contains:

Application binaries

Dependencies

Metadata (e.g., version, maintainer, description)

Scripts (optional): preinst, postinst, prerm, postrm

APT, DPKG, and Ubuntu Software Center all rely on .deb packages.

-----------

üéØ Why Build Your Own .deb?

| Use Case                   | Description                                 |
| -------------------------- | ------------------------------------------- |
| Internal apps              | Share apps across servers or teams          |
| Reproducible builds        | Maintain versioned, testable releases       |
| Dependency control         | Package with specific libraries             |
| Automation                 | Integrate with CI/CD (like Jenkins, GitLab) |
| Distribute to Ubuntu users | Via PPA or custom APT repo                  |


---------
üìÅ .deb Package Structure

Every .deb package is an archive containing:

<package-name>_<version>.deb
‚îú‚îÄ‚îÄ control.tar.gz   ‚Üí Metadata (control file, scripts)
‚îú‚îÄ‚îÄ data.tar.gz      ‚Üí Actual application files
‚îî‚îÄ‚îÄ debian-binary    ‚Üí File with version number (always contains "2.0")

----------
üß™ Minimal Example: Hello World .deb

Step 1: Create Directory Structure

mkdir -p hello-deb/DEBIAN
mkdir -p hello-deb/usr/local/bin

Step 2: Create a Sample Script

echo -e '#!/bin/bash\necho "Hello from my .deb!"' > hello-deb/usr/local/bin/hello
chmod +x hello-deb/usr/local/bin/hello

Step 3: Create Control File

Create hello-deb/DEBIAN/control:

Package: hello
Version: 1.0
Section: base
Priority: optional
Architecture: all
Maintainer: You <you@example.com>
Description: A simple hello world script packaged as .deb

Step 4: Build the .deb
dpkg-deb --build hello-deb

Output:

hello-deb.deb

Install it:

sudo dpkg -i hello-deb.deb

Run it:

hello

---------
‚öôÔ∏è Tooling Options

| Tool           | Description                                          |
| -------------- | ---------------------------------------------------- |
| `dpkg-deb`     | Builds basic packages manually                       |
| `debuild`      | Full-featured Debian packaging (used by maintainers) |
| `checkinstall` | Converts `make install` to `.deb`                    |

---------

üöÄ Automating Build with checkinstall

Instead of manually creating .deb for compiled software:

sudo apt install checkinstall build-essential
./configure
make
sudo checkinstall

This creates a .deb instead of directly installing binaries into your system. Safe and clean!

--------
üõÇ Scripts Inside .deb

You can add scripts in the DEBIAN directory to hook into installation

| Script     | Purpose             |
| ---------- | ------------------- |
| `preinst`  | Runs before install |
| `postinst` | After install       |
| `prerm`    | Before removal      |
| `postrm`   | After removal       |

-----------
‚úÖ Best Practices

| Practice                                                 | Why                                  |
| -------------------------------------------------------- | ------------------------------------ |
| Use proper directory structure (`usr/bin`, `etc/`, etc.) | Follows FHS                          |
| Add metadata like maintainer, version                    | Required for apt                     |
| Use `checkinstall` for small/local builds                | Faster than full Debian build system |
| Validate with `lintian`                                  | Finds packaging issues               |
| Don't hardcode paths                                     | Use relative or system paths         |

---------
‚úÖ Summary

| Task                       | Command                               |
| -------------------------- | ------------------------------------- |
| Create package dirs        | `mkdir -p mypkg/DEBIAN mypkg/usr/bin` |
| Write control file         | `vim mypkg/DEBIAN/control`            |
| Build package              | `dpkg-deb --build mypkg`              |
| Install package            | `sudo dpkg -i mypkg.deb`              |
| Create from `make install` | `sudo checkinstall`                   |
| Validate                   | `lintian mypkg.deb` (optional)        |
